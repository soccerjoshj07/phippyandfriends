# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7992c1c5-823d-4b44-a555-b54b9ecdad84'
  imageRepository: 'soccerjoshjphippyandfriends'
  containerRegistry: 'aciphippyaksdemo.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildNumber)'
  imagePullSecret: 'aciphippyaksdemo11879e66-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # project
  projectName: parrot
  namespace: phippyandfriends

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)-captainkube
        dockerfile: captainkube/$(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(projectName)/$(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)-phippy
        dockerfile: phippy/$(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - publish: manifests
      artifact: manifests

    - publish: captainkube/charts/captainkube
      artifact: captainkubecharts

    - publish: $(projectName)/charts/$(projectName)
      artifact: parrotcharts

    - publish: phippy/charts/phippy
      artifact: phippycharts

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'soccerjoshj07phippyandfriends.phippyandfriends'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              namespace: '$(namespace)'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'

          # Out of the box kubernetes manifest deploy
          # - task: KubernetesManifest@0
          #    displayName: Deploy to Kubernetes cluster
          #    inputs:
          #      action: deploy
          #      manifests: |
          #        $(Pipeline.Workspace)/manifests/deployment.yml
          #        $(Pipeline.Workspace)/manifests/service.yml
          #      imagePullSecrets: |
          #        $(imagePullSecret)
          #      containers: |
          #        $(containerRegistry)/$(imageRepository):$(tag)

          # Helm Upgrade w/ helm 3.0.x
          # - task: HelmInstaller@1
          #  inputs:
          #    helmVersionToInstall: 'latest'

          # - task: HelmDeploy@0
          #   inputs:
          #     connectionType: 'Azure Resource Manager'
          #     azureSubscription: 'Visual Studio Enterprise â€“ MPN (93ddb8b3-ddb9-4d1c-ba59-421456e65538)'
          #     azureResourceGroup: 'rg-phippyaks-demo2'
          #     kubernetesCluster: 'aks-phippyaksdemo'
          #     namespace: 'phippyandfriends'
          #     command: 'upgrade'
          #     chartType: 'FilePath'
          #     chartPath: '$(Pipeline.Workspace)/charts'
          #     releaseName: '$(namespace)-website'
          #     overrideValues: 'ingress.enabled=false,image.repository=$(containerRegistry)/$(imageRepository),image.tag=$(tag)'
          #     waitForExecution: false

          # Kubernetes bake and manifest deploy
          - task: KubernetesManifest@0
            displayName: Bake $(projectName) manifest
            name: bake_${{ variables.projectName }}
            inputs:
              action: 'bake'
              namespace: '$(namespace)'
              helmChart: '$(Pipeline.Workspace)/parrotcharts'
              releaseName: '$(namespace)-website'
              overrides: |
                ingress.enabled:false
                image.repository:$(containerRegistry)/$(imageRepository)
                image.tag:$(tag)
            
          - task: KubernetesManifest@0
            displayName: Deploy ${{ variables.projectName }} to k8s
            inputs:
              manifests: $(bake_${{ variables.projectName }}.manifestsBundle)
              imagePullSecrets: $(imagePullSecret)

          - task: KubernetesManifest@0
            displayName: Bake phippy manifest
            name: bake_phippy
            inputs:
              action: 'bake'
              namespace: '$(namespace)'
              helmChart: '$(Pipeline.Workspace)/phippycharts'
              releaseName: 'phippy-website'
              overrides: |
                ingress.enabled:false
                image.repository:$(containerRegistry)/$(imageRepository)-phippy
                image.tag:$(tag)
            
          - task: KubernetesManifest@0
            displayName: Deploy phippy to k8s
            inputs:
              manifests: $(bake_phippy.manifestsBundle)
              imagePullSecrets: $(imagePullSecret)

          - task: KubernetesManifest@0
            displayName: Bake captainkube manifest
            name: bake_captainkube
            inputs:
              action: 'bake'
              namespace: '$(namespace)'
              helmChart: '$(Pipeline.Workspace)/captainkubecharts'
              releaseName: 'captainkube-website'
              overrides: |
                ingress.enabled:false
                image.repository:$(containerRegistry)/$(imageRepository)-captainkube
                image.tag:$(tag)
            
          - task: KubernetesManifest@0
            displayName: Deploy captainkube to k8s
            inputs:
              manifests: $(bake_captainkube.manifestsBundle)
              imagePullSecrets: $(imagePullSecret)